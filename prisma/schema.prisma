generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?
  phone     String?
  dateOfBirth DateTime?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  emailVerified DateTime?
  image     String?
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts Account[]
  sessions Session[]
  cards     Card[]
  transactions Transaction[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTP {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  purpose   String   // 'transfer', 'login', etc.
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email, purpose])
  @@index([expiresAt])
}

model Card {
  id          Int       @id @default(autoincrement())
  cardNumber  String    @unique
  cardType    CardType
  status      CardStatus @default(ACTIVE)
  balance     Float     @default(0)
  scheme      String    // Visa, Mastercard, etc.
  expiryDate  DateTime
  cvv         String
  isVirtual   Boolean   @default(false)
  
  // Cardholder information
  cardholderName String?
  
  // Limits and settings
  creditLimit   Float?
  dailyLimit    Float     @default(1000)
  pin           String?
  
  // Delivery information (for physical cards)
  deliveryAddress String?
  deliveryCity    String?
  deliveryState   String?
  deliveryZipCode String?
  deliveryCountry String?
  
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          Int           @id @default(autoincrement())
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String
  merchantName String?
  category    String?
  cardId      Int
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  card        Card        @relation(fields: [cardId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

enum CardType {
  PHYSICAL
  VIRTUAL
}

enum CardStatus {
  ACTIVE
  FROZEN
  BLOCKED
  EXPIRED
}

enum TransactionType {
  PAYMENT
  REFUND
  TOP_UP
  BILL_PAYMENT
  MOBILE_RECHARGE
  QR_PAYMENT
  INTERNET_BILL
  ELECTRICITY_BILL
  GAS_BILL
  WATER_BILL
  CABLE_TV
  INSURANCE
  EDUCATION_FEES
  HEALTHCARE
  TRANSPORT
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
